import numpy as np

def determine_trajectory(start_arrow, end_arrow, Rmin):
    # Calculate the distance between the start_arrow and end_arrow
    D = np.sqrt((end_arrow[0] - start_arrow[0]) ** 2 + (end_arrow[1] - start_arrow[1]) ** 2)

    # Check if the distance between the arrows is less than 4 times Rmin
    if D < 4 * Rmin:
        # Calculate the angle theta using the law of cosines
        theta = np.arccos(D / (4 * Rmin))

        # Calculate the center of the third circle C3
        p3 = np.array([start_arrow[0] + 2 * Rmin * np.cos(theta), start_arrow[1] + 2 * Rmin * np.sin(theta)])

        # Compute vectors V1 and V2
        V1 = start_arrow[:2] - p3
        V2 = end_arrow[:2] - p3

        # Normalize V1 and V2
        V1 /= np.linalg.norm(V1)
        V2 /= np.linalg.norm(V2)

        # Calculate the tangent points pt1 and pt2
        pt1 = p3 + Rmin * V1
        pt2 = p3 + Rmin * V2

        # Calculate the vectors V3 and V4 from the center of C3 to the tangent points pt1 and pt2
        V3 = pt1 - p3
        V4 = pt2 - p3

        # Normalize V3 and V4
        V3 /= np.linalg.norm(V3)
        V4 /= np.linalg.norm(V4)

        # Determine the trajectory
        if np.dot(V1, V2) < 0:
            print("RLR trajectory")
        else:
            print("LRL trajectory")
    else:
        print("No valid CCC trajectory exists with the given Rmin.")

# Example usage:
start_arrow = np.array([0, 0, np.radians(45)])  # [x, y, heading angle in radians]
end_arrow = np.array([3, 2, np.radians(-30)])  # [x, y, heading angle in radians]
Rmin = 4

# Determine and print the trajectory
determine_trajectory(start_arrow, end_arrow, Rmin)
